#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Telegram –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã "–ü–ª–∞—Ç–æ–Ω"
"""

import os
import logging
import tempfile
from datetime import datetime
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes
from platon_processor import PlatonProcessor
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class PlatonTelegramBot:
    """Telegram –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω"""
    
    def __init__(self, token: str):
        self.token = token
        self.application = Application.builder().token(token).build()
        self.processor = None
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("process", self.process_command))
        self.application.add_handler(CommandHandler("summary", self.summary_command))
        self.application.add_handler(CommandHandler("clear", self.clear_command))
        self.application.add_handler(CommandHandler("files", self.files_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        self.application.add_handler(MessageHandler(filters.Document.ALL, self.handle_document))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """
ü§ñ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω!*

–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:
‚Ä¢ –ó–∞–≥—Ä—É–∂–∞—Ç—å CSV —Ñ–∞–π–ª—ã —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω
‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
‚Ä¢ –°–æ–∑–¥–∞–≤–∞—Ç—å Excel –æ—Ç—á–µ—Ç—ã
‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/files - –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
/process - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
/summary - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –¥–∞–Ω–Ω—ã–º
/clear - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ

üìÅ *–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:*
1. –ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
3. –ü–æ–ª—É—á–∏—Ç–µ Excel –æ—Ç—á–µ—Ç –∏ —Å–≤–æ–¥–∫—É

–ù–∞—á–Ω–∏—Ç–µ —Å –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞!
        """
        
        keyboard = [
            [InlineKeyboardButton("üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", callback_data="files")],
            [InlineKeyboardButton("üìä –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="process")],
            [InlineKeyboardButton("üìã –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É", callback_data="summary")],
            [InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="clear")],
            [InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text, 
            parse_mode='Markdown',
            reply_markup=reply_markup
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º –±–æ—Ç–∞*

üîπ */start* - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
üîπ */help* - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞
üîπ */files* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
üîπ */process* - –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ CSV —Ñ–∞–π–ª—ã
üîπ */summary* - –ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
üîπ */clear* - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

üìÅ *–†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:*
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª –±–æ—Ç—É
‚Ä¢ –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω
‚Ä¢ –ü–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏

üìä *–ß—Ç–æ –¥–µ–ª–∞–µ—Ç –±–æ—Ç:*
‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
‚Ä¢ –°—á–∏—Ç–∞–µ—Ç —Ä–∞—Å—Ö–æ–¥—ã –ø–æ –¥–æ—Ä–æ–≥–∞–º –∏ –¥–∞—Ç–∞–º
‚Ä¢ –°–æ–∑–¥–∞–µ—Ç Excel –æ—Ç—á–µ—Ç —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –ª–∏—Å—Ç–∞–º–∏
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É

‚ùì *–ü—Ä–æ–±–ª–µ–º—ã?*
–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç CSV —Ñ–∞–π–ª–∞
3. –£–±–µ–¥–∏—Ç—å—Å—è, —á—Ç–æ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω
        """
        
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def clear_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        try:
            # –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
            if 'csv_files' in context.user_data:
                for file_path in context.user_data['csv_files']:
                    if os.path.exists(file_path):
                        os.remove(file_path)
                context.user_data['csv_files'] = []
            
            # –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            if 'file_names' in context.user_data:
                context.user_data['file_names'] = []
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            if 'processor' in context.user_data:
                del context.user_data['processor']
            
            await update.message.reply_text(
                "üßπ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ CSV —Ñ–∞–π–ª—ã."
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö")
    
    async def files_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /files - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        if 'file_names' not in context.user_data or not context.user_data['file_names']:
            await update.message.reply_text(
                "üìÅ –ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤.\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω."
            )
            return
        
        files_list = "üìÅ *–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:*\n\n"
        for i, filename in enumerate(context.user_data['file_names'], 1):
            files_list += f"{i}. `{filename}`\n"
        
        files_list += f"\nüìä –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['file_names'])}\n"
        files_list += "üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö"
        
        await update.message.reply_text(files_list, parse_mode='Markdown')
    
    async def handle_document(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        document = update.message.document
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ CSV —Ñ–∞–π–ª
        if not document.file_name.lower().endswith('.csv'):
            await update.message.reply_text(
                "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω"
            )
            return
        
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if 'csv_files' not in context.user_data:
                context.user_data['csv_files'] = []
                context.user_data['file_names'] = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤
            if document.file_name in context.user_data['file_names']:
                warning_msg = (
                    f"‚ö†Ô∏è *–í–Ω–∏–º–∞–Ω–∏–µ! –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –¥–≤–∞ —Ñ–∞–π–ª–∞ —Å –æ–¥–∏–Ω–∞–∫–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º:*\n"
                    f"`{document.file_name}`\n\n"
                    f"–í–æ–∑–º–æ–∂–Ω–æ –Ω–∞–ª–æ–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤."
                )
                await update.message.reply_text(warning_msg, parse_mode='Markdown')
            
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await context.bot.get_file(document.file_id)
            
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            with tempfile.NamedTemporaryFile(mode='wb', suffix='.csv', delete=False) as temp_file:
                await file.download_to_drive(temp_file.name)
                temp_file_path = temp_file.name
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ —Å–ø–∏—Å–æ–∫ (–Ω–µ –∑–∞–º–µ–Ω—è–µ–º, –∞ –¥–æ–±–∞–≤–ª—è–µ–º)
            context.user_data['csv_files'].append(temp_file_path)
            context.user_data['file_names'].append(document.file_name)
            
            # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            if 'processor' in context.user_data:
                del context.user_data['processor']
            
            await update.message.reply_text(
                f"‚úÖ –§–∞–π–ª *{document.file_name}* —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
                f"üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(context.user_data['csv_files'])}\n"
                f"üîÑ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö",
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
            )
    
    async def process_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /process"""
        if 'csv_files' not in context.user_data or not context.user_data['csv_files']:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª—ã!\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ CSV —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω, –∞ –∑–∞—Ç–µ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /process"
            )
            return
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª–∞—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∞
            processing_msg = await update.message.reply_text("üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –¥–∞–Ω–Ω—ã–µ... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
            processor = PlatonProcessor()
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
            for csv_file in context.user_data['csv_files']:
                if os.path.exists(csv_file):
                    processor.read_csv_file(csv_file)
            
            if not processor.data:
                await processing_msg.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–æ–≤")
                return
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            processor.process_data()
            
            # –°–æ–∑–¥–∞–µ–º Excel –æ—Ç—á–µ—Ç
            output_file = f"–æ—Ç—á–µ—Ç_–ø–ª–∞—Ç–æ–Ω_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx"
            if processor.create_excel_report(output_file):
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Excel —Ñ–∞–π–ª
                with open(output_file, 'rb') as file:
                    await context.bot.send_document(
                        chat_id=update.effective_chat.id,
                        document=file,
                        filename=output_file,
                        caption="üìä Excel –æ—Ç—á–µ—Ç –≥–æ—Ç–æ–≤!"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(output_file)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã summary
                context.user_data['processor'] = processor
                
                # –û—á–∏—â–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞
                for csv_file in context.user_data['csv_files']:
                    if os.path.exists(csv_file):
                        os.remove(csv_file)
                context.user_data['csv_files'] = []
                context.user_data['file_names'] = []
                
                await processing_msg.edit_text(
                    "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! Excel –æ—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n"
                    "üìÅ –ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –æ—á–∏—â–µ–Ω—ã. –ú–æ–∂–µ—Ç–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã.\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /summary –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–≤–æ–¥–∫–∏ –¥–∞–Ω–Ω—ã—Ö."
                )
            else:
                await processing_msg.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Excel –æ—Ç—á–µ—Ç–∞")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {str(e)}")
    
    async def summary_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary"""
        if 'processor' not in context.user_data:
            await update.message.reply_text(
                "‚ùå –°–Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥–æ–π /process"
            )
            return
        
        try:
            processor = context.user_data['processor']
            summary = processor.summary
            
            summary_text = f"""
üìä *–°–≤–æ–¥–∫–∞ –ø–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º*

üìà *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*
‚Ä¢ –ó–∞–ø–∏—Å–µ–π: {summary['total_records']:,}
‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {summary['total_amount']:,.2f} —Ä—É–±.
‚Ä¢ –û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {summary['total_distance']:,.2f} –∫–º
‚Ä¢ –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {len(summary['vehicles'])}
‚Ä¢ –î–æ—Ä–æ–≥: {len(summary['roads'])}

üöõ *–¢–æ–ø-5 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:*
"""
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¢–° –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
            vehicle_costs = []
            for vehicle, records in summary['by_vehicle'].items():
                total_amount = sum(processor._parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
                vehicle_costs.append((vehicle, total_amount))
            
            vehicle_costs.sort(key=lambda x: x[1], reverse=True)
            
            for i, (vehicle, amount) in enumerate(vehicle_costs[:5], 1):
                summary_text += f"{i}. {vehicle}: {amount:,.2f} —Ä—É–±.\n"
            
            summary_text += f"\nüõ£Ô∏è *–¢–æ–ø-5 –¥–æ—Ä–æ–≥ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º:*\n"
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–æ—Ä–æ–≥–∏ –ø–æ —Ä–∞—Å—Ö–æ–¥–∞–º
            road_costs = []
            for road, records in summary['by_road'].items():
                total_amount = sum(processor._parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
                road_costs.append((road, total_amount))
            
            road_costs.sort(key=lambda x: x[1], reverse=True)
            
            for i, (road, amount) in enumerate(road_costs[:5], 1):
                summary_text += f"{i}. {road[:50]}{'...' if len(road) > 50 else ''}: {amount:,.2f} —Ä—É–±.\n"
            
            await update.message.reply_text(summary_text, parse_mode='Markdown')
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}")
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "files":
            await self.files_command(update, context)
        elif query.data == "process":
            await self.process_command(update, context)
        elif query.data == "summary":
            await self.summary_command(update, context)
        elif query.data == "clear":
            await self.clear_command(update, context)
        elif query.data == "help":
            await self.help_command(update, context)
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        self.application.run_polling()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    
    if not token:
        print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞!")
        print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ:")
        print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
        return 1
    
    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = PlatonTelegramBot(token)
    bot.run()

if __name__ == "__main__":
    main()
