#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import csv
import os
from collections import defaultdict

def parse_float(value):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É –≤ —á–∏—Å–ª–æ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π"""
    try:
        return float(value.replace(',', '.'))
    except:
        return 0.0

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=== –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–∏—Å—Ç–µ–º—ã –ü–ª–∞—Ç–æ–Ω ===")
    
    # –ò—â–µ–º CSV —Ñ–∞–π–ª—ã
    csv_files = [f for f in os.listdir('.') if f.endswith('.csv')]
    
    if not csv_files:
        print("CSV —Ñ–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return
    
    print(f"–ù–∞–π–¥–µ–Ω–æ CSV —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
    for file in csv_files:
        print(f"  - {file}")
    
    all_data = []
    
    # –ß–∏—Ç–∞–µ–º –≤—Å–µ CSV —Ñ–∞–π–ª—ã
    for csv_file in csv_files:
        print(f"\n–ß–∏—Ç–∞—é —Ñ–∞–π–ª: {csv_file}")
        
        try:
            with open(csv_file, 'r', encoding='utf-8') as file:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
                sample = file.read(1024)
                file.seek(0)
                
                delimiter = ';' if ';' in sample else ','
                print(f"  –ò—Å–ø–æ–ª—å–∑—É—é —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å: '{delimiter}'")
                
                reader = csv.DictReader(file, delimiter=delimiter)
                
                count = 0
                for row in reader:
                    cleaned_row = {key.strip(): value.strip() for key, value in row.items()}
                    all_data.append(cleaned_row)
                    count += 1
                    
                print(f"  –ü—Ä–æ—á–∏—Ç–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {count}")
                
        except Exception as e:
            print(f"  –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
            continue
    
    if not all_data:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ")
        return
    
    print(f"\n‚úÖ –í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–∞–Ω–Ω—ã–µ...")
    
    by_vehicle = defaultdict(list)
    by_road = defaultdict(list)
    by_date = defaultdict(list)
    by_operation_type = defaultdict(list)
    
    total_amount = 0
    total_distance = 0
    
    for record in all_data:
        vehicle = record.get('–ì–†–ó –¢–°', '')
        road = record.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –¥–æ—Ä–æ–≥–∏', '')
        operation_type = record.get('–¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏', '')
        distance = parse_float(record.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0'))
        amount = parse_float(record.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0'))
        date_str = record.get('–î–∞—Ç–∞/–≤—Ä–µ–º—è –æ–ø–µ—Ä–∞—Ü–∏–∏ (–º—Å–∫)', '')
        
        by_vehicle[vehicle].append(record)
        by_road[road].append(record)
        by_operation_type[operation_type].append(record)
        
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
        try:
            date_part = date_str.split()[0]
            by_date[date_part].append(record)
        except:
            pass
        
        total_amount += amount
        total_distance += distance
    
    # –í—ã–≤–æ–¥–∏–º –æ–±—â—É—é —Å–≤–æ–¥–∫—É
    print(f"\nüìä –û–ë–©–ê–Ø –°–í–û–î–ö–ê")
    print(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}")
    print(f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {total_amount:.2f} —Ä—É–±.")
    print(f"–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {len([v for v in by_vehicle.keys() if v])}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–≥: {len([r for r in by_road.keys() if r])}")
    print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π: {len([t for t in by_operation_type.keys() if t])}")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–º —Å—Ä–µ–¥—Å—Ç–≤–∞–º
    print(f"\nüöõ –ü–û –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ú –°–†–ï–î–°–¢–í–ê–ú")
    vehicle_stats = []
    for vehicle, records in by_vehicle.items():
        if not vehicle:
            continue
        total_amount_vehicle = sum(parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
        total_distance_vehicle = sum(parse_float(r.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0')) for r in records)
        trips_count = len(records)
        
        vehicle_stats.append((vehicle, trips_count, total_amount_vehicle, total_distance_vehicle))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ
    vehicle_stats.sort(key=lambda x: x[2], reverse=True)
    
    print("–¢–æ–ø-10 —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ —Å—É–º–º–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:")
    for i, (vehicle, trips, amount, distance) in enumerate(vehicle_stats[:10], 1):
        avg_amount = amount / trips if trips > 0 else 0
        print(f"{i:2d}. {vehicle}: {trips:3d} –ø–æ–µ–∑–¥–æ–∫, {amount:8.2f} —Ä—É–±., {distance:8.2f} –∫–º (—Å—Ä. {avg_amount:.2f} —Ä—É–±./–ø–æ–µ–∑–¥–∫–∞)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–æ—Ä–æ–≥–∞–º
    print(f"\nüõ£Ô∏è  –ü–û –î–û–†–û–ì–ê–ú")
    road_stats = []
    for road, records in by_road.items():
        if not road:
            continue
        total_amount_road = sum(parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
        total_distance_road = sum(parse_float(r.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0')) for r in records)
        trips_count = len(records)
        
        road_stats.append((road, trips_count, total_amount_road, total_distance_road))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Å—É–º–º–µ
    road_stats.sort(key=lambda x: x[2], reverse=True)
    
    print("–¢–æ–ø-10 –¥–æ—Ä–æ–≥ –ø–æ —Å—É–º–º–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π:")
    for i, (road, trips, amount, distance) in enumerate(road_stats[:10], 1):
        avg_per_km = amount / distance if distance > 0 else 0
        print(f"{i:2d}. {road}: {trips:3d} –ø–æ–µ–∑–¥–æ–∫, {amount:8.2f} —Ä—É–±., {distance:8.2f} –∫–º (—Å—Ä. {avg_per_km:.2f} —Ä—É–±./–∫–º)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ –¥–∞—Ç–∞–º
    print(f"\nüìÖ –ü–û –î–ê–¢–ê–ú")
    date_stats = []
    for date, records in by_date.items():
        if not date:
            continue
        total_amount_date = sum(parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
        total_distance_date = sum(parse_float(r.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0')) for r in records)
        trips_count = len(records)
        
        date_stats.append((date, trips_count, total_amount_date, total_distance_date))
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    date_stats.sort(key=lambda x: x[0])
    
    print("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º (–ø–µ—Ä–≤—ã–µ 10 –¥–Ω–µ–π):")
    for i, (date, trips, amount, distance) in enumerate(date_stats[:10], 1):
        print(f"{i:2d}. {date}: {trips:3d} –ø–æ–µ–∑–¥–æ–∫, {amount:8.2f} —Ä—É–±., {distance:8.2f} –∫–º")
    
    # –ê–Ω–∞–ª–∏–∑ –ø–æ —Ç–∏–ø–∞–º –æ–ø–µ—Ä–∞—Ü–∏–π
    print(f"\n‚öôÔ∏è  –ü–û –¢–ò–ü–ê–ú –û–ü–ï–†–ê–¶–ò–ô")
    for operation_type, records in by_operation_type.items():
        if not operation_type:
            continue
        total_amount_type = sum(parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
        total_distance_type = sum(parse_float(r.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0')) for r in records)
        trips_count = len(records)
        
        print(f"{operation_type}: {trips_count:3d} –æ–ø–µ—Ä–∞—Ü–∏–π, {total_amount_type:8.2f} —Ä—É–±., {total_distance_type:8.2f} –∫–º")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print(f"\nüíæ –°–æ–∑–¥–∞—é —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç...")
    
    try:
        with open('–æ—Ç—á–µ—Ç_–ø–ª–∞—Ç–æ–Ω.txt', 'w', encoding='utf-8') as f:
            f.write("–û–¢–ß–ï–¢ –ü–û –ù–ê–ß–ò–°–õ–ï–ù–ò–Ø–ú –°–ò–°–¢–ï–ú–´ –ü–õ–ê–¢–û–ù\n")
            f.write("=" * 50 + "\n\n")
            
            f.write("–û–ë–©–ê–Ø –°–í–û–î–ö–ê\n")
            f.write(f"–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(all_data)}\n")
            f.write(f"–û–±—â–∞—è —Å—É–º–º–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π: {total_amount:.2f} —Ä—É–±.\n")
            f.write(f"–û–±—â–µ–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ: {total_distance:.2f} –∫–º\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤: {len([v for v in by_vehicle.keys() if v])}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Ä–æ–≥: {len([r for r in by_road.keys() if r])}\n")
            f.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∏–ø–æ–≤ –æ–ø–µ—Ä–∞—Ü–∏–π: {len([t for t in by_operation_type.keys() if t])}\n\n")
            
            f.write("–ü–û –¢–†–ê–ù–°–ü–û–†–¢–ù–´–ú –°–†–ï–î–°–¢–í–ê–ú\n")
            f.write("-" * 50 + "\n")
            for vehicle, trips, amount, distance in vehicle_stats:
                avg_amount = amount / trips if trips > 0 else 0
                f.write(f"{vehicle}: {trips} –ø–æ–µ–∑–¥–æ–∫, {amount:.2f} —Ä—É–±., {distance:.2f} –∫–º (—Å—Ä. {avg_amount:.2f} —Ä—É–±./–ø–æ–µ–∑–¥–∫–∞)\n")
            
            f.write("\n–ü–û –î–û–†–û–ì–ê–ú\n")
            f.write("-" * 50 + "\n")
            for road, trips, amount, distance in road_stats:
                avg_per_km = amount / distance if distance > 0 else 0
                f.write(f"{road}: {trips} –ø–æ–µ–∑–¥–æ–∫, {amount:.2f} —Ä—É–±., {distance:.2f} –∫–º (—Å—Ä. {avg_per_km:.2f} —Ä—É–±./–∫–º)\n")
            
            f.write("\n–ü–û –î–ê–¢–ê–ú\n")
            f.write("-" * 50 + "\n")
            for date, trips, amount, distance in date_stats:
                f.write(f"{date}: {trips} –ø–æ–µ–∑–¥–æ–∫, {amount:.2f} —Ä—É–±., {distance:.2f} –∫–º\n")
            
            f.write("\n–ü–û –¢–ò–ü–ê–ú –û–ü–ï–†–ê–¶–ò–ô\n")
            f.write("-" * 50 + "\n")
            for operation_type, records in by_operation_type.items():
                if not operation_type:
                    continue
                total_amount_type = sum(parse_float(r.get('–°–ø–∏—Å–∞–Ω–∏–µ —Å –†–ó (—Ä—É–±.)', '0')) for r in records)
                total_distance_type = sum(parse_float(r.get('–ü—É—Ç—å –ø–æ —Ñ–µ–¥. –¥–æ—Ä–æ–≥–∞–º, –∫–º', '0')) for r in records)
                trips_count = len(records)
                
                f.write(f"{operation_type}: {trips_count} –æ–ø–µ—Ä–∞—Ü–∏–π, {total_amount_type:.2f} —Ä—É–±., {total_distance_type:.2f} –∫–º\n")
        
        print("‚úÖ –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª '–æ—Ç—á–µ—Ç_–ø–ª–∞—Ç–æ–Ω.txt'")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
    
    print(f"\nüéâ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    main()
