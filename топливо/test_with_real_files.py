#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
"""

from fuel_consumption_analyzer import FuelConsumptionAnalyzer
import os
import pandas as pd

def test_with_real_files():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏ –∏–∑ –ø–∞–ø–∫–∏ —Ç–æ–ø–ª–∏–≤–æ"""
    
    print("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –° –†–ï–ê–õ–¨–ù–´–ú–ò –§–ê–ô–õ–ê–ú–ò ===")
    
    # –ü—É—Ç–∏ –∫ —Ä–µ–∞–ª—å–Ω—ã–º —Ñ–∞–π–ª–∞–º
    krassula_file = "—Ç–æ–ø–ª–∏–≤–æ/15.10.2025 11_24_18 –û—Ç—á—ë—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.xlsx"
    glonass_file = "—Ç–æ–ø–ª–∏–≤–æ/–í—Å–µ_–¢–°-–ò–ü_–°–µ—Ä–∫–∏–Ω_9)_–ì—Ä—É–ø–ø–æ–≤–æ–π_–æ—Ç—á–µ—Ç_–ø–æ_–∑–∞–ø—Ä–∞–≤–∫–∞–º_–∏_—Å–ª–∏–≤–∞–º_15.10.2025_12-26-52.xlsx"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if not os.path.exists(krassula_file):
        print(f"‚ùå –§–∞–π–ª –ö—Ä–∞—Å—Å—É–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω: {krassula_file}")
        return False
    
    if not os.path.exists(glonass_file):
        print(f"‚ùå –§–∞–π–ª –ì–õ–û–ù–ê–°–° –Ω–µ –Ω–∞–π–¥–µ–Ω: {glonass_file}")
        return False
    
    print(f"‚úÖ –§–∞–π–ª –ö—Ä–∞—Å—Å—É–ª—ã –Ω–∞–π–¥–µ–Ω: {krassula_file}")
    print(f"‚úÖ –§–∞–π–ª –ì–õ–û–ù–ê–°–° –Ω–∞–π–¥–µ–Ω: {glonass_file}")
    
    # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
    analyzer = FuelConsumptionAnalyzer()
    
    try:
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ö—Ä–∞—Å—Å—É–ª—ã
        print("\n1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ö—Ä–∞—Å—Å—É–ª—ã...")
        if analyzer.load_krassula_data(krassula_file):
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ö—Ä–∞—Å—Å—É–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π: {len(analyzer.krassula_data)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø–∏—Å–µ–π
            print("   –ü–µ—Ä–≤—ã–µ 3 –∑–∞–ø–∏—Å–∏:")
            for i, (_, row) in enumerate(analyzer.krassula_data.head(3).iterrows()):
                print(f"     {i+1}. {row['–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è']} - {row['–ö–æ–ª-–≤–æ –ª–∏—Ç—Ä–æ–≤']}–ª - {row['–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π']}")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ö—Ä–∞—Å—Å—É–ª—ã")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ì–õ–û–ù–ê–°–°
        print("\n2. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö –ì–õ–û–ù–ê–°–°...")
        if analyzer.load_glonass_data(glonass_file):
            print("‚úÖ –î–∞–Ω–Ω—ã–µ –ì–õ–û–ù–ê–°–° –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            print(f"   –ó–∞–ø—Ä–∞–≤–∫–∏: {len(analyzer.glonass_refuel_data)}")
            print(f"   –°–ª–∏–≤—ã: {len(analyzer.glonass_drain_data)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–æ–º–µ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
            if not analyzer.glonass_refuel_data.empty:
                vehicles = analyzer.glonass_refuel_data['vehicle_number'].dropna().unique()
                print(f"   –ù–∞–π–¥–µ–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(vehicles)}")
                print(f"   –ù–æ–º–µ—Ä–∞: {list(vehicles)[:5]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –ì–õ–û–ù–ê–°–°")
            return False
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç
        print("\n3. –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∫–∞—Ä—Ç...")
        card_numbers = set()
        for card_full in analyzer.krassula_data['–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã'].dropna():
            card_num = analyzer._extract_card_number(str(card_full))
            if card_num:
                card_numbers.add(card_num)
        
        print(f"   –ù–∞–π–¥–µ–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç: {len(card_numbers)}")
        print(f"   –ù–æ–º–µ—Ä–∞ –∫–∞—Ä—Ç: {list(card_numbers)[:10]}...")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –∫–∞—Ä—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π
        print("\n4. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ...")
        test_mapping = {}
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–∞—Ä—Ç –∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        cards = list(card_numbers)[:5]
        vehicles = analyzer.glonass_refuel_data['vehicle_number'].dropna().unique()[:5]
        
        for i, card in enumerate(cards):
            if i < len(vehicles):
                test_mapping[card] = vehicles[i]
        
        print(f"   –°–æ–∑–¥–∞–Ω–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π: {len(test_mapping)}")
        for card, vehicle in test_mapping.items():
            print(f"     –ö–∞—Ä—Ç–∞ {card} -> –ê–≤—Ç–æ–º–æ–±–∏–ª—å {vehicle}")
        
        analyzer.load_card_mapping(test_mapping)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
        print("\n5. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø—Ä–∞–≤–æ–∫...")
        results = analyzer.match_refuels()
        
        print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π: {len(results)}")
        total_refuels = sum(len(refuels) for refuels in results.values())
        matched_refuels = sum(
            len([r for r in refuels if r['status'] == 'matched'])
            for refuels in results.values()
        )
        
        print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–∞–≤–æ–∫: {total_refuels}")
        print(f"   –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {matched_refuels}")
        print(f"   –ü—Ä–æ—Ü–µ–Ω—Ç —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è: {(matched_refuels/total_refuels*100):.1f}%" if total_refuels > 0 else "0%")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        print(f"\n6. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(analyzer.notifications)}")
        for i, notification in enumerate(analyzer.notifications[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
            print(f"   {i+1}. {notification['type']}: {notification['message']}")
        
        if len(analyzer.notifications) > 5:
            print(f"   ... –∏ –µ—â–µ {len(analyzer.notifications) - 5} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        print("\n7. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞...")
        test_output = "test_report.xlsx"
        if analyzer.generate_excel_report(test_output):
            print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω: {test_output}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            file_size = os.path.getsize(test_output)
            print(f"   –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
            return False
        
        print("\n" + "="*50)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*50)
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í–û –í–†–ï–ú–Ø –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø: {e}")
        import traceback
        traceback.print_exc()
        return False

def analyze_file_structure():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    
    print("\n=== –ê–ù–ê–õ–ò–ó –°–¢–†–£–ö–¢–£–†–´ –§–ê–ô–õ–û–í ===")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ö—Ä–∞—Å—Å—É–ª—ã
    krassula_file = "—Ç–æ–ø–ª–∏–≤–æ/15.10.2025 11_24_18 –û—Ç—á—ë—Ç –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è—Ö.xlsx"
    
    if os.path.exists(krassula_file):
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –ö—Ä–∞—Å—Å—É–ª—ã: {krassula_file}")
        try:
            df = pd.read_excel(krassula_file)
            print(f"   –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
            print("   –ö–æ–ª–æ–Ω–∫–∏:")
            for i, col in enumerate(df.columns):
                print(f"     {i+1}. {col}")
            
            print("\n   –ü–µ—Ä–≤—ã–µ 3 —Å—Ç—Ä–æ–∫–∏:")
            for i, (_, row) in enumerate(df.head(3).iterrows()):
                print(f"     –°—Ç—Ä–æ–∫–∞ {i+1}:")
                for col in df.columns:
                    value = str(row[col])[:50] + "..." if len(str(row[col])) > 50 else str(row[col])
                    print(f"       {col}: {value}")
                print()
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ñ–∞–π–ª –ì–õ–û–ù–ê–°–°
    glonass_file = "—Ç–æ–ø–ª–∏–≤–æ/–í—Å–µ_–¢–°-–ò–ü_–°–µ—Ä–∫–∏–Ω_9)_–ì—Ä—É–ø–ø–æ–≤–æ–π_–æ—Ç—á–µ—Ç_–ø–æ_–∑–∞–ø—Ä–∞–≤–∫–∞–º_–∏_—Å–ª–∏–≤–∞–º_15.10.2025_12-26-52.xlsx"
    
    if os.path.exists(glonass_file):
        print(f"\nüìä –ê–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ –ì–õ–û–ù–ê–°–°: {glonass_file}")
        try:
            # –ß–∏—Ç–∞–µ–º –ª–∏—Å—Ç—ã
            excel_file = pd.ExcelFile(glonass_file)
            print(f"   –õ–∏—Å—Ç—ã: {excel_file.sheet_names}")
            
            for sheet_name in excel_file.sheet_names:
                print(f"\n   –õ–∏—Å—Ç '{sheet_name}':")
                df = pd.read_excel(glonass_file, sheet_name=sheet_name)
                print(f"     –†–∞–∑–º–µ—Ä: {df.shape[0]} —Å—Ç—Ä–æ–∫, {df.shape[1]} –∫–æ–ª–æ–Ω–æ–∫")
                print("     –ö–æ–ª–æ–Ω–∫–∏:")
                for i, col in enumerate(df.columns):
                    print(f"       {i+1}. {col}")
                
                if not df.empty:
                    print("     –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞:")
                    for col in df.columns:
                        value = str(df.iloc[0][col])[:50] + "..." if len(str(df.iloc[0][col])) > 50 else str(df.iloc[0][col])
                        print(f"       {col}: {value}")
                
        except Exception as e:
            print(f"   ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")

if __name__ == "__main__":
    # –°–Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤
    analyze_file_structure()
    
    # –ó–∞—Ç–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
    test_with_real_files()
